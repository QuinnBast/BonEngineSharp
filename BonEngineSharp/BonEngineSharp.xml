<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BonEngineSharp</name>
    </assembly>
    <members>
        <member name="T:BonEngineSharp.Assets.ConfigAsset">
            <summary>
            Config asset type.
            This asset loads a config file (.ini format in default implementation) and provide API to retrieve or set data from it.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Assets.ConfigAsset.#ctor(System.IntPtr)">
            <summary>
            Create the asset.
            </summary>
            <param name="handle">Asset handle inside the low-level engine.</param>
        </member>
        <member name="P:BonEngineSharp.Assets.ConfigAsset.AssetType">
            <summary>
            Get asset type.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Assets.ConfigAsset.GetStr(System.String,System.String,System.String)">
            <summary>
            Get a string value from config.
            </summary>
            <param name="section">Section to get value from.</param>
            <param name="key">Key to get.</param>
            <param name="defaultVal">Default value to return if not found.</param>
            <returns>Value from config, or defaultVal if not found.</returns>
        </member>
        <member name="M:BonEngineSharp.Assets.ConfigAsset.GetInt(System.String,System.String,System.Int32)">
            <summary>
            Get an int value from config.
            </summary>
            <param name="section">Section to get value from.</param>
            <param name="key">Key to get.</param>
            <param name="defaultVal">Default value to return if not found.</param>
            <returns>Value from config, or defaultVal if not found.</returns>
        </member>
        <member name="M:BonEngineSharp.Assets.ConfigAsset.GetFloat(System.String,System.String,System.Single)">
            <summary>
            Get a float value from config.
            </summary>
            <param name="section">Section to get value from.</param>
            <param name="key">Key to get.</param>
            <param name="defaultVal">Default value to return if not found.</param>
            <returns>Value from config, or defaultVal if not found.</returns>
        </member>
        <member name="M:BonEngineSharp.Assets.ConfigAsset.GetBool(System.String,System.String,System.Boolean)">
            <summary>
            Get a bool value from config.
            </summary>
            <param name="section">Section to get value from.</param>
            <param name="key">Key to get.</param>
            <param name="defaultVal">Default value to return if not found.</param>
            <returns>Value from config, or defaultVal if not found.</returns>
        </member>
        <member name="M:BonEngineSharp.Assets.ConfigAsset.SetValue(System.String,System.String,System.Object)">
            <summary>
            Set value in config.
            </summary>
            <param name="section">Section to set value in.</param>
            <param name="key">Key to set.</param>
            <param name="value">Value to set (will be stringified with ToString()).</param>
        </member>
        <member name="M:BonEngineSharp.Assets.ConfigAsset.RemoveKey(System.String,System.String)">
            <summary>
            Remove a key from config.
            </summary>
            <param name="section">Section to remove key from.</param>
            <param name="key">Key to remove.</param>
        </member>
        <member name="M:BonEngineSharp.Assets.ConfigAsset.Sections">
            <summary>
            Get all sections in config.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Assets.ConfigAsset.Keys(System.String)">
            <summary>
            Get all keys in a section.
            </summary>
            <param name="section">Section to get keys from.</param>
        </member>
        <member name="M:BonEngineSharp.Assets.ConfigAsset.ToIniString">
            <summary>
            Convert this config to string in ini format.
            </summary>
            <returns>Config as ini file string.</returns>
        </member>
        <member name="M:BonEngineSharp.Assets.ConfigAsset.Finalize">
            <summary>
            Dispose on destructor.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Assets.FontAsset">
            <summary>
            Font asset type.
            This asset is used to render text.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Assets.FontAsset.#ctor(System.IntPtr)">
            <summary>
            Create the asset.
            </summary>
            <param name="handle">Asset handle inside the low-level engine.</param>
        </member>
        <member name="P:BonEngineSharp.Assets.FontAsset.AssetType">
            <summary>
            Get asset type.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Assets.FontAsset.Finalize">
            <summary>
            Dispose on destructor.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Assets.FontAsset.Size">
            <summary>
            Get music track length.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Assets.IAsset">
            <summary>
            Asset base class.
            This is the basic class all Assets inherit from and its main purpose is to manage the handle to the CPP-side asset.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Assets.IAsset._handle">
            <summary>
            The asset's handle in BonEngine.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Assets.IAsset.#ctor(System.IntPtr)">
            <summary>
            Create the asset.
            </summary>
            <param name="handle">Asset handle inside the low-level engine.</param>
        </member>
        <member name="P:BonEngineSharp.Assets.IAsset.HaveHandle">
            <summary>
            Get if this asset got a handle.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Assets.IAsset.AssetType">
            <summary>
            Get asset type.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Assets.IAsset.IsValid">
            <summary>
            Is this asset valid?
            </summary>
        </member>
        <member name="P:BonEngineSharp.Assets.IAsset.Path">
            <summary>
            Asset's file path, if have one.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Assets.IAsset.Finalize">
            <summary>
            Dispose on destructor.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Assets.IAsset.Dispose">
            <summary>
            Destroy the asset pointer by releasing its handle.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Assets.ImageAsset">
            <summary>
            Image asset type.
            Used to render sprites on screen, or as a render target to draw on.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Assets.ImageAsset.#ctor(System.IntPtr)">
            <summary>
            Create the asset.
            </summary>
            <param name="handle">Asset handle inside the low-level engine.</param>
        </member>
        <member name="P:BonEngineSharp.Assets.ImageAsset.AssetType">
            <summary>
            Get asset type.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Assets.ImageAsset.Finalize">
            <summary>
            Dispose on destructor.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Assets.ImageAsset.Width">
            <summary>
            Get image width.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Assets.ImageAsset.Height">
            <summary>
            Get image height.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Assets.ImageAsset.FilteringMode">
            <summary>
            Get image filtering mode.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Assets.MusicAsset">
            <summary>
            Music asset type.
            This asset is used to play long music tracks in background.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Assets.MusicAsset.#ctor(System.IntPtr)">
            <summary>
            Create the asset.
            </summary>
            <param name="handle">Asset handle inside the low-level engine.</param>
        </member>
        <member name="P:BonEngineSharp.Assets.MusicAsset.AssetType">
            <summary>
            Get asset type.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Assets.MusicAsset.Finalize">
            <summary>
            Dispose on destructor.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Assets.MusicAsset.Length">
            <summary>
            Get music track length.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Assets.SoundAsset">
            <summary>
            Sound track asset type.
            This asset is used to play sound effects on mix channels. For music tracks, use the MusicAsset.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Assets.SoundAsset.#ctor(System.IntPtr)">
            <summary>
            Create the asset.
            </summary>
            <param name="handle">Asset handle inside the low-level engine.</param>
        </member>
        <member name="P:BonEngineSharp.Assets.SoundAsset.AssetType">
            <summary>
            Get asset type.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Assets.SoundAsset.Finalize">
            <summary>
            Dispose on destructor.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Assets.SoundAsset.Length">
            <summary>
            Get sound track length.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Assets.SoundAsset.IsPlaying">
            <summary>
            Check if this sound track is currently playing.
            </summary>
            <returns>True if sound track is playing.</returns>
        </member>
        <member name="T:BonEngineSharp.BonEngine">
            <summary>
            Main entry point class.
            
            This is the equivilent of the 'bon' root namespace, and provide the main method to start the engine (Start) and the _Engine getter.
            </summary>
        </member>
        <member name="P:BonEngineSharp.BonEngine.Version">
            <summary>
            BonEngine version - must match the underlying CPP version.
            </summary>
        </member>
        <member name="M:BonEngineSharp.BonEngine.Start(BonEngineSharp.Scene)">
            <summary>
            Start the engine.
            </summary>
            <param name="scene">Scene to set as first scene.</param>
        </member>
        <member name="M:BonEngineSharp.BonEngine.Stop">
            <summary>
            Stop the engine and exit.
            </summary>
        </member>
        <member name="M:BonEngineSharp.BonEngine.RegisterCustomManager(BonEngineSharp.Managers.CustomManager)">
            <summary>
            Register a custom manager to the engine.
            </summary>
            <param name="manager">Manager instance.</param>
        </member>
        <member name="M:BonEngineSharp.BonEngine.GetCustomManager(System.String)">
            <summary>
            Get a custom manager instance.
            </summary>
            <param name="id">Manager id.</param>
            <returns>Custom manager instance.</returns>
        </member>
        <member name="P:BonEngineSharp.BonEngine._Engine">
            <summary>
            Get engine instance.
            </summary>
        </member>
        <member name="T:BonEngineSharp._BonEngineBind">
            <summary>
            Import the public methods we use from the BonEngine native dll in order to implement the C# bind.
            This class wraps everything we need from the CAPI headers.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.Initialize">
            <summary>
            Static constructor - setup dll include paths.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Start(System.IntPtr)">
            <summary>
            Start the engine.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Stop">
            <summary>
            Stop the engine.
            </summary>
        </member>
        <member name="T:BonEngineSharp._BonEngineBind.NoParamsCallback">
            <summary>
            Callback without params.
            </summary>
        </member>
        <member name="T:BonEngineSharp._BonEngineBind.DoubleParamCallback">
            <summary>
            Callback with a single double.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Scene_Create(BonEngineSharp._BonEngineBind.NoParamsCallback,BonEngineSharp._BonEngineBind.NoParamsCallback,BonEngineSharp._BonEngineBind.NoParamsCallback,BonEngineSharp._BonEngineBind.NoParamsCallback,BonEngineSharp._BonEngineBind.DoubleParamCallback,BonEngineSharp._BonEngineBind.DoubleParamCallback)">
            <summary>
            Create a scene.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Scene_Destroy(System.IntPtr)">
            <summary>
            Destroy a scene.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Scene_IsFirstScene(System.IntPtr)">
            <summary>
            Get if its the first scene we loaded.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Engine_CurrentState">
            <summary>
            Get current engine state.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Engine_UpdatesCount">
            <summary>
            Get updates count.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Engine_FixedUpdatesCount">
            <summary>
            Get fixed updates count.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Engine_Destroyed">
            <summary>
            Was the engine destroyed?
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Engine_Running">
            <summary>
            Is the engine running?
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Engine_GetFixedUpdatesInterval">
            <summary>
            Get fixed updates interval.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Engine_SetFixedUpdatesInterval(System.Double)">
            <summary>
            Set fixed updates interval.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Manager_Create(BonEngineSharp._BonEngineBind.NoParamsCallback,BonEngineSharp._BonEngineBind.NoParamsCallback,BonEngineSharp._BonEngineBind.NoParamsCallback,BonEngineSharp._BonEngineBind.DoubleParamCallback,System.String)">
            <summary>
            Set fixed updates interval.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Manager_Register(System.IntPtr)">
            <summary>
            Register a custom manager.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Manager_Destroy(System.IntPtr)">
            <summary>
            Destroy a custom manager.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Game_Exit">
            <summary>
            Exit game.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Game_ChangeScene(System.IntPtr)">
            <summary>
            Change scene.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Game_LoadConfig(System.String)">
            <summary>
            Load config.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Game_ElapsedTime">
            <summary>
            Get elapsed time.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Game_DeltaTime">
            <summary>
            Get delta time.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Log_IsValid(System.Int32)">
            <summary>
            Check if log level is valid.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Log_GetLevel">
            <summary>
            Get log level.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Log_SetLevel(System.Int32)">
            <summary>
            Set log level.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Log_Write(System.Int32,System.String)">
            <summary>
            Write log.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Diagnostics_GetCounter(System.Int32)">
            <summary>
            Get diagnostics counter.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Diagnostics_IncreaseCounter(System.Int32,System.Int32)">
            <summary>
            Increase diagnostics counter.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Diagnostics_ResetCounter(System.Int32)">
            <summary>
            Reset diagnostics counter.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Diagnostics_FpsCounter">
            <summary>
            Get FPS count.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Assets_LoadImage(System.String,System.Int32,System.Boolean)">
            <summary>
            Load an image asset.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Assets_CreateEmptyImage(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an empty image asset.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Assets_LoadMusic(System.String,System.Boolean)">
            <summary>
            Load a music asset.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Assets_LoadSound(System.String,System.Boolean)">
            <summary>
            Load a sound asset.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Assets_LoadFont(System.String,System.Int32,System.Boolean)">
            <summary>
            Load a font asset.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Assets_LoadConfig(System.String,System.Boolean)">
            <summary>
            Load a config asset.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Assets_CreateEmptyConfig">
            <summary>
            Create an empty config asset.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Assets_SaveConfig(System.IntPtr,System.String)">
            <summary>
            Create an empty config asset.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Assets_FreeAssetPointer(System.IntPtr)">
            <summary>
            Free an asset pointer.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Assets_ClearCache">
            <summary>
            Clear assets cache.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Asset_IsValid(System.IntPtr)">
            <summary>
            Check if an asset is valid.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Asset_Path(System.IntPtr)">
            <summary>
            Get asset's path.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Asset_Path_Str(System.IntPtr)">
            <summary>
            Get asset's path, converted to string.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Image_FilteringMode(System.IntPtr)">
            <summary>
            Get image filtering mode.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Image_Width(System.IntPtr)">
            <summary>
            Get image width.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Image_Height(System.IntPtr)">
            <summary>
            Get image height.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Config_GetStr(System.IntPtr,System.String,System.String,System.String)">
            <summary>
            Get string value from config, with raw return value.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Config_GetStr_(System.IntPtr,System.String,System.String,System.String)">
            <summary>
            Get string value from config.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Config_GetBool(System.IntPtr,System.String,System.String,System.Boolean)">
            <summary>
            Get bool value from config, with raw return value.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Config_GetInt(System.IntPtr,System.String,System.String,System.Int32)">
            <summary>
            Get int value from config, with raw return value.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Config_GetFloat(System.IntPtr,System.String,System.String,System.Single)">
            <summary>
            Get float value from config, with raw return value.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Config_RemoveKey(System.IntPtr,System.String,System.String)">
            <summary>
            Removes a key from config.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Config_SetValue(System.IntPtr,System.String,System.String,System.String)">
            <summary>
            Set a value in config.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Config_Section(System.IntPtr,System.Int32)">
            <summary>
            Get section name from config, with raw return value.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Config_Section_Str(System.IntPtr,System.Int32)">
            <summary>
            Get section name from config.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Config_SectionsCount(System.IntPtr)">
            <summary>
            Get sections count.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Config_Key(System.IntPtr,System.String,System.Int32)">
            <summary>
            Get key name from config, with raw return value.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Config_Key_Str(System.IntPtr,System.String,System.Int32)">
            <summary>
            Get key name from config.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Config_KeysCount(System.IntPtr,System.String)">
            <summary>
            Get keys count in section.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Music_Length(System.IntPtr)">
            <summary>
            Get music track length.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Sound_Length(System.IntPtr)">
            <summary>
            Get sound track length.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Sound_IsPlaying(System.IntPtr)">
            <summary>
            Get if sound track is currently playing.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Font_Size(System.IntPtr)">
            <summary>
            Get font asset size.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Gfx_DrawImage(System.IntPtr,System.Single,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw an image on screen.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Gfx_DrawImageEx(System.IntPtr,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw an image on screen.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Gfx_DrawText(System.IntPtr,System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Draw text on sreen.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Gfx_DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Draw a line.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Gfx_DrawPixel(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Draw a pixel.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Gfx_SetViewport(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set viewport.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Gfx_SetWindowProperties(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set window properties.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Gfx_SetTitle(System.String)">
            <summary>
            Set window title.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Gfx_WindowSizeX">
            <summary>
            Get window size X.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Gfx_WindowSizeY">
            <summary>
            Get window size Y.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Gfx_SetRenderTarget(System.IntPtr)">
            <summary>
            Set rendering target.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Gfx_DrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Int32)">
            <summary>
            Draw a rectangle on screen.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Gfx_DrawCircle(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Int32)">
            <summary>
            Draw a circle on screen.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Gfx_ClearScreen(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Clear screen.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Sfx_SetAudioProperties(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Set audio device properties.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Sfx_PlayMusic(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Play music track.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Sfx_PauseMusic(System.Boolean)">
            <summary>
            Pause music.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Sfx_SetMusicVolume(System.Int32)">
            <summary>
            Set music volume.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Sfx_StopMusic">
            <summary>
            Stop music.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Sfx_PlaySound(System.IntPtr,System.Int32,System.Int32,System.Single)">
            <summary>
            Play sound.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Sfx_PlaySoundEx(System.IntPtr,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Play sound.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Sfx_SetChannelDistance(System.Int32,System.Single)">
            <summary>
            Set channel distance.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Sfx_SetChannelVolume(System.Int32,System.Int32)">
            <summary>
            Set channel volume.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Sfx_SetChannelPanning(System.Int32,System.Single,System.Single)">
            <summary>
            Set channel panning.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Sfx_StopChannel(System.Int32)">
            <summary>
            Stop channel.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Sfx_SetMasterVolume(System.Int32,System.Int32)">
            <summary>
            Set master volumes.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Input_Down(System.String)">
            <summary>
            Set master volumes.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Input_ReleasedNow(System.String)">
            <summary>
            Set master volumes.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Input_PressedNow(System.String)">
            <summary>
            Set master volumes.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Input_KeyDown(System.Int32)">
            <summary>
            Set master volumes.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Input_KeyReleasedNow(System.Int32)">
            <summary>
            Set master volumes.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Input_KeyPressedNow(System.Int32)">
            <summary>
            Set master volumes.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Input_ScrollDeltaX">
            <summary>
            Set master volumes.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Input_ScrollDeltaY">
            <summary>
            Set master volumes.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Input_CursorPositionX">
            <summary>
            Set master volumes.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Input_CursorPositionY">
            <summary>
            Set master volumes.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Input_CursorDeltaX">
            <summary>
            Set master volumes.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Input_CursorDeltaY">
            <summary>
            Set master volumes.
            </summary>
        </member>
        <member name="M:BonEngineSharp._BonEngineBind.BON_Input_SetKeyBind(System.Int32,System.String)">
            <summary>
            Set master volumes.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Defs.EngineStates">
            <summary>
            Different states the engine can be in.
            You can query engine states to better understand whats going on while debugging.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.EngineStates.BeforeInitialize">
            <summary>
            Engine was not initialized yet.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.EngineStates.Initialize">
            <summary>
            Engine is initializing now.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.EngineStates.InternalUpdate">
            <summary>
            Engine is doing managers updates.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.EngineStates.FixedUpdate">
            <summary>
            Engine is doing fixed updates.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.EngineStates.Update">
            <summary>
            Engine is doing regular updates.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.EngineStates.DrawImage">
            <summary>
            Engine is drawing.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.EngineStates.MainLoopInBetweens">
            <summary>
            Engine is doing other main-loop code that isn't updates or drawing.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.EngineStates.HandleEvents">
            <summary>
            Engine is handling events.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.EngineStates.Stopping">
            <summary>
            Engine is stopping.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.EngineStates.Destroyed">
            <summary>
            Engine is completely stopped and destroyed.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.EngineStates.SwitchScene">
            <summary>
            Engine is currently switching scenes (not set on first scene set).
            </summary>
        </member>
        <member name="T:BonEngineSharp.Defs.AssetType">
            <summary>
            Asset types enum - used to identify type of assets.
            
            This is not really necessary in C#, but exists to match the definition in the CPP side of it.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.AssetType.Image">
            <summary>
            An image asset we can use for rendering.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.AssetType.Sound">
            <summary>
            Sound effect asset we can play as short sounds.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.AssetType.Music">
            <summary>
            A long soundtrack asset, used for music.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.AssetType.Config">
            <summary>
            Configuration file asset.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.AssetType.Font">
            <summary>
            Font asset, used to draw text.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.AssetType._Count">
            <summary>
            How many asset types we got.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Defs.ImageFilterMode">
            <summary>
            Image filtering modes.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.ImageFilterMode.Nearest">
            <summary>
            Nearest-neighbor filtering (crispy, pixelator result on scaling).
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.ImageFilterMode.Linear">
            <summary>
            Linear filtering (lower quality smoothing).
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.ImageFilterMode.Anisotropic">
            <summary>
            Anisotropic filtering (higher quality smoothing).
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.ImageFilterMode._Count">
            <summary>
            Filtering modes count.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Defs.DiagnosticsCounters">
            <summary>
            Diagnostics counters we can query from the Diagnostics manager.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.DiagnosticsCounters.DrawCalls">
            <summary>
            Draw calls during this frame.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.DiagnosticsCounters.PlaySoundCalls">
            <summary>
            Play sound calls during this frame.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.DiagnosticsCounters.LoadedAssets">
            <summary>
            Currently loaded assets count.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.DiagnosticsCounters._BuiltInCounterCount">
            <summary>
            Last built-in counter value.
            If you want to add custom counters, start here and go up until 'MaxCounters'.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.DiagnosticsCounters._MaxCounters">
            <summary>
            Max counters value.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Defs.WindowModes">
            <summary>
            Window startup modes - used when recreating the window via the Gfx manager.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.WindowModes.Windowed">
            <summary>
            Windowed mode.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.WindowModes.WindowedBorderless">
            <summary>
            Windowed mode without border.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.WindowModes.Fullscreen">
            <summary>
            Fullscreen mode (change resolution).
            </summary>
        </member>
        <member name="T:BonEngineSharp.Defs.BlendModes">
            <summary>
            Possible rendering blend modes for drawing images and shapes.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.BlendModes.Opaque">
            <summary>
            Render without any transparency or opacity.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.BlendModes.AlphaBlend">
            <summary>
            Render with alpha channels.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.BlendModes.Additive">
            <summary>
            Render with additive (lighten) effect.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.BlendModes.Mod">
            <summary>
            Render with mod effect.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.BlendModes.Multiply">
            <summary>
            Render with multiply (darken) effect.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.BlendModes._Count">
            <summary>
            Blend modes count.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Defs.KeyCodes">
            <summary>
            Keyboard and mouse key codes.
            Use these codes to query the Input manager directly, or to bind keys to game actions and query actions instead.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Defs.LogLevel">
            <summary>
            Log levels to use when writing logs.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.LogLevel.None">
            <summary>
            Invalid log level - will never show.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.LogLevel.Debug">
            <summary>
            Debug logs.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.LogLevel.Info">
            <summary>
            Info logs.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.LogLevel.Warn">
            <summary>
            Warning logs.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.LogLevel.Error">
            <summary>
            Errors log.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.LogLevel.Critical">
            <summary>
            Critical logs.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Defs.SoundChannelId">
            <summary>
            A wrapper around <see cref="T:System.Int32"/> to hold channel id.
            Channel ids represent the mix channel we play sound effects on. You can use this channel id to control the playing sound volume, panning, duration ect.
            Note that there are two special channel ids you should watch for: AllChannels (-1), used to affect all channels at once, and Invalid (-2), which is what you get when engine couldn't play a sound.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.SoundChannelId.AllChannels">
            <summary>
            Channel id for actions on all channels.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.SoundChannelId.Invalid">
            <summary>
            Invalid channel id, for when we fail to allocate channel.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Defs.SoundChannelId.IsValidSingle">
            <summary>
            Is it a valid single channel?
            </summary>
        </member>
        <member name="P:BonEngineSharp.Defs.SoundChannelId.IsValid">
            <summary>
            Is it a valid value?
            </summary>
        </member>
        <member name="M:BonEngineSharp.Defs.SoundChannelId.op_Implicit(System.Int32)~BonEngineSharp.Defs.SoundChannelId">
            <summary>
            Implicitly converts a <see cref="T:System.Int32"/> to a Record.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> to convert.</param>
            <returns>A new Record with the specified value.</returns>
        </member>
        <member name="M:BonEngineSharp.Defs.SoundChannelId.op_Implicit(BonEngineSharp.Defs.SoundChannelId)~System.Int32">
            <summary>
            Implicitly converts a Record to a <see cref="T:System.Int32"/>.
            </summary>
            <param name="record">The Record to convert.</param>
            <returns>
            A <see cref="T:System.Int32"/> that is the specified Record's value.
            </returns>
        </member>
        <member name="T:BonEngineSharp.Defs.AudioFormats">
            <summary>
            Audio format options.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.AudioFormats.U8">
            <summary>
            Unsigned 8-bit samples.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.AudioFormats.S8">
            <summary>
            Signed 8-bit samples.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.AudioFormats.U16LSB">
            <summary>
            Unsigned 16-bit samples.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.AudioFormats.S16LSB">
            <summary>
            Signed 16-bit samples.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.AudioFormats.U16MSB">
            <summary>
            Unsigned 16-bit samples, big endian.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Defs.AudioFormats.S16MSB">
            <summary>
            Signed 16-bit samples, big endian.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Engine">
            <summary>
            The main engine class.
            This object manages all the managers and runs the main loop. Normally you don't need to access it directly.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Engine.CurrentState">
            <summary>
            Get current engine state.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Engine.UpdatesCount">
            <summary>
            Get total updates count.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Engine.FixedUpdatesCount">
            <summary>
            Get total fixed updates count.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Engine.Running">
            <summary>
            Is the engine running?
            </summary>
        </member>
        <member name="P:BonEngineSharp.Engine.Destroyed">
            <summary>
            Is the engine destroyed?
            </summary>
        </member>
        <member name="P:BonEngineSharp.Engine.FixedUpdatesInterval">
            <summary>
            Get / set the fixed updates interval, in seconds.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Engine.#ctor">
            <summary>
            Create engine.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Engine.Gfx">
            <summary>
            Get Gfx manager.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Engine.Sfx">
            <summary>
            Get Sfx manager.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Engine.Input">
            <summary>
            Get Input manager.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Engine.Assets">
            <summary>
            Get Assets manager.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Engine.Game">
            <summary>
            Get Game manager.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Engine.Diagnostics">
            <summary>
            Get Diagnostics manager.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Engine.Log">
            <summary>
            Get Log manager.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Engine.RegisterManager(BonEngineSharp.Managers.IManager)">
            <summary>
            Register a manager.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Engine.GetManager``1(System.String)">
            <summary>
            Get manager of generic type by id.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Scene">
            <summary>
            A BonEngine scene.
            This is the main class you use to implement your game logic, by overriding its protected key methods: Load, Unload, Start, Update, FixedUpdate and Draw. 
            These methods are invoked by the Engine while running its main loop.
            
            You can also use multiple scenes to implement different 'screens' or level types in your game (for example a scene for main menu and a scene for actual game).
            </summary>
        </member>
        <member name="M:BonEngineSharp.Scene.GetOrCreateHandle">
            <summary>
            Get or create scene handle (the part in CPP side).
            </summary>
            <returns>Scene handle.</returns>
        </member>
        <member name="M:BonEngineSharp.Scene.Finalize">
            <summary>
            Destroy the scene.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Scene.Dispose">
            <summary>
            Destroy this scene.
            Do not call this on the active scene! You don't need to call this, it will be called automatically.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Scene._Load">
            <summary>
            On scene load.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Scene._Unload">
            <summary>
            On scene unload.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Scene._Start">
            <summary>
            On scene start.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Scene._Update(System.Double)">
            <summary>
            On update.
            </summary>
            <param name="deltaTime">Time passed, in seconds, since last call.</param>
        </member>
        <member name="M:BonEngineSharp.Scene._FixedUpdate(System.Double)">
            <summary>
            On fixed update.
            </summary>
            <param name="deltaTime">Time passed, in seconds, since last call. Will be constant value.</param>
        </member>
        <member name="M:BonEngineSharp.Scene._Draw">
            <summary>
            On draw.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Scene.Load">
            <summary>
            Called when scene loads, which is when it becomes the newly active scene.
            
            For scenes that are not the first scene, this occurs at the begining of the main loop, after the previous frame have completely ended.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Scene.Unload">
            <summary>
            Called when scene unloads - either when being replaced by another scene, or when game exit while this scene is active.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Scene.Start">
            <summary>
            Called when scene loads, but only after the main loop started and everything in initialized.
            
            Mostly useful for first scenes, as any scene loaded after it will be loaded inside the main loop and call this immediately after Load().
            </summary>
        </member>
        <member name="M:BonEngineSharp.Scene.Update(System.Double)">
            <summary>
            Called every frame once, and used to update things. Most of your game logic goes here (with exception of things that go into FixedUpdate(), if you need any).
            </summary>
            <param name="deltaTime">Time passed, in seconds, since last call.</param>
        </member>
        <member name="M:BonEngineSharp.Scene.FixedUpdate(System.Double)">
            <summary>
            Called with constant intervals before the normal Update() calls. Useful for physics-related calculations.
            Note: for every Update() call there may be zero or more FixedUpdate() calls, depending on your game running speed and fixed interval.
            </summary>
            <param name="deltaTime">Time passed, in seconds, since last call. Will be constant value.</param>
        </member>
        <member name="M:BonEngineSharp.Scene.Draw">
            <summary>
            Called every frame right after Update(). Used to draw the scene.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Scene.IsFirstScene">
            <summary>
            Get if this the first scene loaded.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Framework.Color">
            <summary>
            Base color object.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Color.R">
            <summary>
            Red component.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Color.G">
            <summary>
            Green component.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Color.B">
            <summary>
            Blue component.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Color.A">
            <summary>
            Opacity.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create the color component.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.Color.FromRGBA(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create color from components.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.Color.FromBytes(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Create color from components.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Color.White">
            <summary>
            White color const.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Color.Black">
            <summary>
            Black color const.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Color.TransparentBlack">
            <summary>
            Transparent black color const.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Color.Transparent">
            <summary>
            Transparent color const.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Color.HalfTransparent">
            <summary>
            Half transparent color const.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Color.Gray">
            <summary>
            Gray color const.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Color.Red">
            <summary>
            Red color const.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Color.Green">
            <summary>
            Green color const.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Color.Blue">
            <summary>
            Blue color const.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Color.Yellow">
            <summary>
            Yellow color const.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Color.Purple">
            <summary>
            Purple color const.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Color.Teal">
            <summary>
            Teal color const.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.Color.Random">
            <summary>
            Create and return a random color.
            </summary>
            <returns>Random color.</returns>
        </member>
        <member name="T:BonEngineSharp.Framework.PointF">
            <summary>
            Point class.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.PointF.X">
            <summary>
            X component of the point.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.PointF.Y">
            <summary>
            Y component of the point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.#ctor(System.Single,System.Single)">
            <summary>
            Create the point.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.PointF.One">
            <summary>
            Point with value 1,1.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.PointF.Zero">
            <summary>
            Point with value 0,0.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.PointF.Half">
            <summary>
            Point with value 0.5, 0.5.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.Multiply(System.Single)">
            <summary>
            Multiply point with a scalar.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.Multiply(BonEngineSharp.Framework.PointF)">
            <summary>
            Multiply point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.Multiply(System.Single,System.Single)">
            <summary>
            Multiply point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.Divide(System.Single)">
            <summary>
            Divide point with a scalar.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.Divide(BonEngineSharp.Framework.PointF)">
            <summary>
            Divide point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.Divide(System.Single,System.Single)">
            <summary>
            Divide point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.Add(System.Single)">
            <summary>
            Add point with a scalar.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.Add(BonEngineSharp.Framework.PointF)">
            <summary>
            Add point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.Add(System.Single,System.Single)">
            <summary>
            Add point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.Substract(System.Single)">
            <summary>
            Substract point with a scalar.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.Substract(BonEngineSharp.Framework.PointF)">
            <summary>
            Substract point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.Substract(System.Single,System.Single)">
            <summary>
            Substract point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.RotateSelf(System.Single)">
            <summary>
            Rotate self by degrees.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.Rotate(System.Single)">
            <summary>
            Rotate clone by degrees.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.Clone">
            <summary>
            Clone point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.MultiplySelf(System.Single)">
            <summary>
            Multiply point with a scalar.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.MultiplySelf(BonEngineSharp.Framework.PointF)">
            <summary>
            Multiply point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.MultiplySelf(System.Single,System.Single)">
            <summary>
            Multiply point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.DivideSelf(System.Single)">
            <summary>
            Divide point with a scalar.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.DivideSelf(BonEngineSharp.Framework.PointF)">
            <summary>
            Divide point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.DivideSelf(System.Single,System.Single)">
            <summary>
            Divide point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.AddSelf(System.Single)">
            <summary>
            Add point with a scalar.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.AddSelf(BonEngineSharp.Framework.PointF)">
            <summary>
            Add point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.AddSelf(System.Single,System.Single)">
            <summary>
            Add point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.SubstractSelf(System.Single)">
            <summary>
            Substract point with a scalar.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.SubstractSelf(BonEngineSharp.Framework.PointF)">
            <summary>
            Substract point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.SubstractSelf(System.Single,System.Single)">
            <summary>
            Substract point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.DistanceTo(BonEngineSharp.Framework.PointF)">
            <summary>
            Get distance to another point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.FromAngle(System.Int32)">
            <summary>
            Convert direction in degrees to Point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.FromString(System.String)">
            <summary>
            Create point from string.
            </summary>
            <param name="str">String to parse, must be in format "x,y".</param>
            <returns>Point instance.</returns>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.ToAngle">
            <summary>
            Convert point to degree.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.Normalize">
            <summary>
            Normalize this point value.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.Set(System.Single,System.Single)">
            <summary>
            Set point values.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Framework.PointF.Magnitude">
            <summary>
            Calc point magnitude.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.Equals(System.Object)">
            <summary>
            Check if this point equals to another point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.GetHashCode">
            <summary>
            Implement hash code of point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointF.op_Implicit(BonEngineSharp.Framework.PointF)~BonEngineSharp.Framework.PointI">
            <summary>
            Implicit conversion to pointI.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Framework.PointI">
            <summary>
            Point class.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.PointI.X">
            <summary>
            X component of the point.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.PointI.Y">
            <summary>
            Y component of the point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.#ctor(System.Int32,System.Int32)">
            <summary>
            Create the point.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.PointI.One">
            <summary>
            Point with value 1,1.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.PointI.Zero">
            <summary>
            Point with value 0,0.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.PointI.Half">
            <summary>
            Point with value 0.5, 0.5.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.Multiply(System.Int32)">
            <summary>
            Multiply point with a scalar.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.Multiply(System.Single)">
            <summary>
            Multiply point with a scalar.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.Multiply(BonEngineSharp.Framework.PointI)">
            <summary>
            Multiply point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.Multiply(System.Int32,System.Int32)">
            <summary>
            Multiply point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.Divide(System.Int32)">
            <summary>
            Divide point with a scalar.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.Divide(BonEngineSharp.Framework.PointI)">
            <summary>
            Divide point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.Divide(System.Int32,System.Int32)">
            <summary>
            Divide point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.Add(System.Int32)">
            <summary>
            Add point with a scalar.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.Add(BonEngineSharp.Framework.PointI)">
            <summary>
            Add point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.Add(System.Int32,System.Int32)">
            <summary>
            Add point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.Substract(System.Int32)">
            <summary>
            Substract point with a scalar.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.Substract(BonEngineSharp.Framework.PointI)">
            <summary>
            Substract point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.Substract(System.Int32,System.Int32)">
            <summary>
            Substract point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.RotateSelf(System.Single)">
            <summary>
            Rotate self by degrees.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.Rotate(System.Single)">
            <summary>
            Rotate clone by degrees.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.Clone">
            <summary>
            Clone point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.MultiplySelf(System.Int32)">
            <summary>
            Multiply point with a scalar.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.MultiplySelf(BonEngineSharp.Framework.PointI)">
            <summary>
            Multiply point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.MultiplySelf(System.Int32,System.Int32)">
            <summary>
            Multiply point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.DivideSelf(System.Int32)">
            <summary>
            Divide point with a scalar.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.DivideSelf(BonEngineSharp.Framework.PointI)">
            <summary>
            Divide point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.DivideSelf(System.Int32,System.Int32)">
            <summary>
            Divide point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.AddSelf(System.Int32)">
            <summary>
            Add point with a scalar.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.AddSelf(BonEngineSharp.Framework.PointI)">
            <summary>
            Add point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.AddSelf(System.Int32,System.Int32)">
            <summary>
            Add point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.SubstractSelf(System.Int32)">
            <summary>
            Substract point with a scalar.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.SubstractSelf(BonEngineSharp.Framework.PointI)">
            <summary>
            Substract point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.SubstractSelf(System.Int32,System.Int32)">
            <summary>
            Substract point with a point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.DistanceTo(BonEngineSharp.Framework.PointI)">
            <summary>
            Get distance to another point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.FromAngle(System.Int32)">
            <summary>
            Convert direction in degrees to Point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.FromString(System.String)">
            <summary>
            Create point from string.
            </summary>
            <param name="str">String to parse, must be in format "x,y".</param>
            <returns>Point instance.</returns>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.ToAngle">
            <summary>
            Convert point to degree.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.Normalize">
            <summary>
            Normalize this point value.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.Set(System.Int32,System.Int32)">
            <summary>
            Set point values.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Framework.PointI.Magnitude">
            <summary>
            Calc point magnitude.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.Equals(System.Object)">
            <summary>
            Check if this point equals to another point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.GetHashCode">
            <summary>
            Implement hash code of point.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.PointI.op_Implicit(BonEngineSharp.Framework.PointI)~BonEngineSharp.Framework.PointF">
            <summary>
            Implicit conversion to pointF.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Framework.RectangleF">
            <summary>
            Represent a rectangle.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.RectangleF.X">
            <summary>
            X position.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.RectangleF.Y">
            <summary>
            Y position.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.RectangleF.Width">
            <summary>
            Rectangle width.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.RectangleF.Height">
            <summary>
            Rectangle height.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Framework.RectangleF.Left">
            <summary>
            Set / get rectangle left position.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Framework.RectangleF.Right">
            <summary>
            Set / get rectangle right position.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Framework.RectangleF.Top">
            <summary>
            Set / get rectangle top position.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Framework.RectangleF.Bottom">
            <summary>
            Set / get rectangle bottom position.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create the rectangle.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.RectangleF.Set(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the rectangle components.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.RectangleF.Reset">
            <summary>
            Reset the rectangle.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.RectangleF.Contains(BonEngineSharp.Framework.PointF)">
            <summary>
            Check if contains a point.
            </summary>
            <param name="point">Point to check.</param>
            <returns>If point is within the rectangle.</returns>
        </member>
        <member name="M:BonEngineSharp.Framework.RectangleF.Contains(BonEngineSharp.Framework.RectangleF)">
            <summary>
            Check if containing another rectangle.
            </summary>
            <param name="other">Other rectangle to test.</param>
            <returns>True if other rectangle is inside this rectangle.</returns>
        </member>
        <member name="M:BonEngineSharp.Framework.RectangleF.Overlaps(BonEngineSharp.Framework.RectangleF)">
            <summary>
            Check if intersects with or containing another rectangle.
            </summary>
            <param name="other">Other rectangle to check.</param>
            <returns>True if containing or intersecting with given rectangle.</returns>
        </member>
        <member name="P:BonEngineSharp.Framework.RectangleF.Center">
            <summary>
            Get absolute center point.
            Check if contains a point.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.RectangleF.Empty">
            <summary>
            An empty rectangle const.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.RectangleF.op_Implicit(BonEngineSharp.Framework.RectangleF)~BonEngineSharp.Framework.RectangleI">
            <summary>
            Implicit conversion to RectangleI.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Framework.RectangleI">
            <summary>
            Represent a rectangle.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.RectangleI.X">
            <summary>
            X position.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.RectangleI.Y">
            <summary>
            Y position.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.RectangleI.Width">
            <summary>
            Rectangle width.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.RectangleI.Height">
            <summary>
            Rectangle height.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Framework.RectangleI.Left">
            <summary>
            Set / get rectangle left position.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Framework.RectangleI.Right">
            <summary>
            Set / get rectangle right position.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Framework.RectangleI.Top">
            <summary>
            Set / get rectangle top position.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Framework.RectangleI.Bottom">
            <summary>
            Set / get rectangle bottom position.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.RectangleI.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create the rectangle.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.RectangleI.Set(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the rectangle components.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.RectangleI.Reset">
            <summary>
            Reset the rectangle.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.RectangleI.Contains(BonEngineSharp.Framework.PointI)">
            <summary>
            Check if contains a point.
            </summary>
            <param name="point">Point to check.</param>
            <returns>If point is within the rectangle.</returns>
        </member>
        <member name="M:BonEngineSharp.Framework.RectangleI.Contains(BonEngineSharp.Framework.RectangleI)">
            <summary>
            Check if containing another rectangle.
            </summary>
            <param name="other">Other rectangle to test.</param>
            <returns>True if other rectangle is inside this rectangle.</returns>
        </member>
        <member name="M:BonEngineSharp.Framework.RectangleI.Overlaps(BonEngineSharp.Framework.RectangleI)">
            <summary>
            Check if intersects with or containing another rectangle.
            </summary>
            <param name="other">Other rectangle to check.</param>
            <returns>True if containing or intersecting with given rectangle.</returns>
        </member>
        <member name="P:BonEngineSharp.Framework.RectangleI.Center">
            <summary>
            Get absolute center point.
            Check if contains a point.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.RectangleI.Empty">
            <summary>
            An empty rectangle const.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.RectangleI.op_Implicit(BonEngineSharp.Framework.RectangleI)~BonEngineSharp.Framework.RectangleF">
            <summary>
            Implicit conversion to RectangleF.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Framework.Sprite">
            <summary>
            A renderable sprite - hold rendering params.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Sprite.Image">
            <summary>
            Source Image.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Sprite.Position">
            <summary>
            Position.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Sprite.Size">
            <summary>
            Drawing size.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Sprite.Blend">
            <summary>
            Blending mode.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Sprite.SourceRect">
            <summary>
            Source rectangle.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Sprite.Origin">
            <summary>
            Drawing origin (0.0 - 1.0 relative to sprite size).
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Sprite.Rotation">
            <summary>
            Drawing rotation.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.Sprite.Color">
            <summary>
            Drawing color.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Framework.Sprite.LooseDestRect">
            <summary>
            Get estimated dest rect, without rotation applied.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Framework.Sprite.DestSize">
            <summary>
            Get destination size in pixels.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Framework.SpriteAnimationStep">
            <summary>
            A single step in a spritesheet animation.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.SpriteAnimationStep.Duration">
            <summary>
            For how long, in seconds, we need to display this animation step.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Framework.SpriteAnimationStep.Index">
            <summary>
            The index of the sprite in the spritesheet during this animation step.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Framework.SpriteAnimation">
            <summary>
            Represent an animation inside a spritesheet.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Framework.SpriteAnimation.Identifier">
            <summary>
            Animation identifier.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Framework.SpriteAnimation.Repeats">
            <summary>
            Is this animation repeating itself when done? Or just remain stuck on last frame?
            </summary>
        </member>
        <member name="P:BonEngineSharp.Framework.SpriteAnimation.StepsCount">
            <summary>
            Get animation steps count.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.SpriteAnimation.#ctor(System.String)">
            <summary>
            Create empty sprite animation.
            </summary>
            <param name="identifier">Animation identifier.</param>
        </member>
        <member name="M:BonEngineSharp.Framework.SpriteAnimation.#ctor(System.String,BonEngineSharp.Assets.ConfigAsset)">
            <summary>
            Load animation from config asset, based on animation identifier.
            </summary>
            <param name="identifier">Animation identifier.</param>
            <param name="config">Config asset to load from.</param>
            <remarks>Config must contain a section called 'anim_xxx', where xxx is this animation's unique identifier.
            Under this section, we should have the following keys:
                - repeats = true / false - does this animation loops, or remain stuck on last step after done?
                - steps_count = how many steps we have in this animation.
                - setp_x_duration[x is step index] = duration, in seconds, of this animation step.
                - setp_x_source[x is step index] = index in spritesheet file, format is: "x,y".
            For more info, check out demo_spritesheet.ini in test assets folder.</remarks>
        </member>
        <member name="M:BonEngineSharp.Framework.SpriteAnimation.Animate(System.Double@,System.Double)">
            <summary>
            Animate based on progress and return index in spritesheet.
            </summary>
            <param name="progress">Animation total progress, in seconds. This param is updated every call so you need to preserve it between calls.</param>
            <param name="deltaTime">How much to advance animation in current call.</param>
            <returns>Index to set in spritesheet.</returns>
        </member>
        <member name="M:BonEngineSharp.Framework.SpriteAnimation.Animate(System.Double@,System.Double,System.Int32@,System.Boolean@)">
            <summary>
            Animate based on progress and return index in spritesheet.
            </summary>
            <param name="progress">Animation total progress, in seconds. This param is updated every call so you need to preserve it between calls.</param>
            <param name="deltaTime">How much to advance animation in current call.</param>
            <param name="currStep">Will contain current animation step index.</param>
            <param name="didFinish">Will be set to true if animation ended (for repeating animations, will be true during the frame it reset back to step 0).</param>
            <returns>Index to set in spritesheet.</returns>
        </member>
        <member name="M:BonEngineSharp.Framework.SpriteAnimation.AddStep(BonEngineSharp.Framework.SpriteAnimationStep)">
            <summary>
            Add step to animation.
            </summary>
            <param name="step">Step to add.</param>
        </member>
        <member name="T:BonEngineSharp.Framework.SpriteSheet">
            <summary>
            Define the properties of a spritesheet, which sprites we have in it, and sprite animations.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Framework.SpriteSheet.SpritesCount">
            <summary>
            How many sprites we have on X and Y axis inside the spritesheet.
            This defines how we calculate the size and position of a specific sprite in sheet.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.SpriteSheet.#ctor">
            <summary>
            Create empty spritesheet.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Framework.SpriteSheet.#ctor(BonEngineSharp.Assets.ConfigAsset)">
            <summary>
            Create the spritesheet from config file.
            </summary>
            <param name="config">Config asset to load spritesheet from.</param>
        </member>
        <member name="M:BonEngineSharp.Framework.SpriteSheet.LoadFromConfig(BonEngineSharp.Assets.ConfigAsset)">
            <summary>
            Load spritesheet properties from config asset.
            Note: this will replace all existing settings.
            </summary>
            <param name="config">Config file to load from.</param>
            <remarks>Config must contain the following section:
            [general]
                - sprites_count = how many sprites there are in this spritesheet, format is: "x,y".
                - animations = list of comma-separated animations found in this spritesheet config. 
                                for every animation listed here, you need to also include a section with animation data.
                                check out 'SpriteAnimation' constructor for more info.
                                
            [bookmarks]
                - optional, contains a list of values where every key is a bookmark identifier and value is sprite index "x,y".
                    later, you can use this to set sprites from spritesheet by names. for example: sheet.SetSprite(sprite, "item_sword");
                    
            For more info, check out demo_spritesheet.ini in test assets folder.
            </remarks>
        </member>
        <member name="M:BonEngineSharp.Framework.SpriteSheet.SetSprite(BonEngineSharp.Framework.Sprite,BonEngineSharp.Framework.PointI,System.Single)">
            <summary>
            Set a sprite's source rectangle from index in spritesheet.
            </summary>
            <param name="sprite">Sprite to set.</param>
            <param name="indexInSheet">Index in spritesheet.</param>
            <param name="sizeFactor">Set the size of the sprite to be the spritesheet's single sprite size, multiplied by this value. If set to 0, will not change sprite size.</param>
        </member>
        <member name="M:BonEngineSharp.Framework.SpriteSheet.SetSprite(BonEngineSharp.Framework.Sprite,System.String,System.Single)">
            <summary>
            Set a sprite's source rectangle from bookmark in spritesheet.
            </summary>
            <param name="sprite">Sprite to set.</param>
            <param name="bookmarkId">Bookmark id to set.</param>
            <param name="sizeFactor">Set the size of the sprite to be the spritesheet's single sprite size, multiplied by this value. If set to 0, will not change sprite size.</param>
        </member>
        <member name="M:BonEngineSharp.Framework.SpriteSheet.GetAnimation(System.String)">
            <summary>
            Get animation by id.
            </summary>
            <param name="identifier">Animation id to get.</param>
            <returns>Animation instance.</returns>
        </member>
        <member name="M:BonEngineSharp.Framework.SpriteSheet.AddAnimation(BonEngineSharp.Framework.SpriteAnimation)">
            <summary>
            Add animation to spritesheet.
            Can override existing keys.
            </summary>
            <param name="animation">Animation to set.</param>
        </member>
        <member name="M:BonEngineSharp.Framework.SpriteSheet.AddBookmark(System.String,BonEngineSharp.Framework.PointI)">
            <summary>
            Set a new bookmark in spritesheet.
            Can override existing keys.
            </summary>
            <param name="bookmarkId">Bookmark id to set.</param>
            <param name="spriteIndex">Bookmark index in spritesheet.</param>
        </member>
        <member name="M:BonEngineSharp.Framework.SpriteSheet.GetBookmark(System.String)">
            <summary>
            Get bookmark value from id.
            </summary>
            <param name="bookmarkId">Bookmark id.</param>
            <returns>Bookmark value, as index in spritesheet.</returns>
        </member>
        <member name="M:BonEngineSharp.Framework.SpriteSheet.Animate(BonEngineSharp.Framework.Sprite,System.String,System.Double@,System.Double,System.Single)">
            <summary>
            Animate sprite based on animation id and progress.
            </summary>
            <param name="sprite">Sprite to animate.</param>
            <param name="animation">Animation id.</param>
            <param name="progress">Animation total progress, in seconds. This param is updated every call so you need to preserve it between calls.</param>
            <param name="deltaTime">How much to advance animation in current call.</param>
            <param name="sizeFactor">Set the size of the sprite to be the spritesheet's single sprite size, multiplied by this value. If set to 0, will not change sprite size.</param>
            <returns>Index to set in spritesheet.</returns>
        </member>
        <member name="M:BonEngineSharp.Framework.SpriteSheet.Animate(BonEngineSharp.Framework.Sprite,System.String,System.Double@,System.Double,System.Int32@,System.Boolean@,System.Single)">
            <summary>
            Animate sprite based on animation id and progress.
            </summary>
            <param name="sprite">Sprite to animate.</param>
            <param name="animation">Animation id.</param>
            <param name="progress">Animation total progress, in seconds. This param is updated every call so you need to preserve it between calls.</param>
            <param name="deltaTime">How much to advance animation in current call.</param>
            <param name="currStep">Will contain current animation step index.</param>
            <param name="didFinish">Will be set to true if animation ended (for repeating animations, will be true during the frame it reset back to step 0).</param>
            <param name="sizeFactor">Set the size of the sprite to be the spritesheet's single sprite size, multiplied by this value. If set to 0, will not change sprite size.</param>
            <returns>Index to set in spritesheet.</returns>
        </member>
        <member name="T:BonEngineSharp.Managers.AssetsManager">
            <summary>
            Assets manager.
            Responsible to load or create game assets. Use this manager when you want to load textures, sound effects, music, config, ect.
            </summary>
        </member>
        <member name="F:BonEngineSharp.Managers.AssetsManager.AssetsRoot">
            <summary>
            Optional root folder to load all assets from
            </summary>
        </member>
        <member name="P:BonEngineSharp.Managers.AssetsManager.Id">
            <summary>
            Get manager id.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.AssetsManager.ToAssetsPath(System.String,System.Boolean)">
            <summary>
            Add 'AssetsRoot' to an asset path.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.AssetsManager.ClearCache">
            <summary>
            Clear assets cache.
            Note: this will not release assets that you still hold a reference to.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.AssetsManager.LoadImage(System.String,BonEngineSharp.Defs.ImageFilterMode,System.Boolean)">
            <summary>
            Loads an image asset.
            </summary>
            <param name="filename">Image path.</param>
            <param name="filter">Image filtering mode.</param>
            <param name="useCache">Should we use cache for this asset to make future loadings faster?</param>
            <returns>Loaded image asset.</returns>
        </member>
        <member name="M:BonEngineSharp.Managers.AssetsManager.CreateEmptyImage(BonEngineSharp.Framework.PointI,BonEngineSharp.Defs.ImageFilterMode)">
            <summary>
            Creates an empty image.
            </summary>
            <param name="size">Image size.</param>
            <param name="filter">Image filtering mode.</param>
            <returns>Loaded image asset.</returns>
        </member>
        <member name="M:BonEngineSharp.Managers.AssetsManager.LoadConfig(System.String,System.Boolean)">
            <summary>
            Loads a config asset.
            </summary>
            <param name="filename">Config path.</param>
            <param name="useCache">Should we use cache for this asset to make future loadings faster?</param>
            <returns>Loaded config asset.</returns>
        </member>
        <member name="M:BonEngineSharp.Managers.AssetsManager.CreateEmptyConfig">
            <summary>
            Creates an empty config.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.AssetsManager.SaveConfig(BonEngineSharp.Assets.ConfigAsset,System.String)">
            <summary>
            Saves a config file.
            </summary>
            <returns>True if saving was successful.</returns>
        </member>
        <member name="M:BonEngineSharp.Managers.AssetsManager.LoadMusic(System.String,System.Boolean)">
            <summary>
            Loads a music asset.
            </summary>
            <param name="filename">Music file path.</param>
            <param name="useCache">Should we use cache for this asset to make future loadings faster?</param>
            <returns>Loaded music asset.</returns>
        </member>
        <member name="M:BonEngineSharp.Managers.AssetsManager.LoadSound(System.String,System.Boolean)">
            <summary>
            Loads a sound track asset.
            </summary>
            <param name="filename">Sound track path.</param>
            <param name="useCache">Should we use cache for this asset to make future loadings faster?</param>
            <returns>Loaded sound asset.</returns>
        </member>
        <member name="M:BonEngineSharp.Managers.AssetsManager.LoadFont(System.String,System.Int32,System.Boolean)">
            <summary>
            Loads a font asset.
            </summary>
            <param name="filename">Font track path.</param>
            <param name="fontSize">Font native size to load.</param>
            <param name="useCache">Should we use cache for this asset to make future loadings faster?</param>
            <returns>Loaded font asset.</returns>
        </member>
        <member name="T:BonEngineSharp.Managers.CustomManager">
            <summary>
            A custom manager users can inherit from and register into the engine.
            If you need to implement your own custom manager, use this as a base class.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.CustomManager.GetOrCreateHandle">
            <summary>
            Get or create manager handle (the part in CPP side).
            </summary>
            <returns>Scene handle.</returns>
        </member>
        <member name="M:BonEngineSharp.Managers.CustomManager.Finalize">
            <summary>
            Dispose on destructor.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.CustomManager.Dispose">
            <summary>
            Dispose the manager.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.CustomManager._Initialize">
            <summary>
            Initialize manager when engine starts.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.CustomManager._Start">
            <summary>
            Called when main loop starts.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.CustomManager._Dispose">
            <summary>
            Clear / free this manager's resources.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.CustomManager._Update(System.Double)">
            <summary>
            Called every frame.
            </summary>
            <param name="deltaTime">Delta time since last frame.</param>
        </member>
        <member name="T:BonEngineSharp.Managers.DiagnosticsManager">
            <summary>
            Diagnostics manager.
            Used to query diagnostics and debug data like draw calls count, FPS, ect.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Managers.DiagnosticsManager.Id">
            <summary>
            Get manager id.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Managers.DiagnosticsManager.FpsCount">
            <summary>
            Get FPS count.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.DiagnosticsManager.GetCounter(BonEngineSharp.Defs.DiagnosticsCounters)">
            <summary>
            Get counter value.
            </summary>
            <param name="counter">Counter id to get.</param>
            <returns>Counter value.</returns>
        </member>
        <member name="M:BonEngineSharp.Managers.DiagnosticsManager.GetCounter(System.Int32)">
            <summary>
            Get counter value.
            </summary>
            <param name="counter">Counter id to get.</param>
            <returns>Counter value.</returns>
        </member>
        <member name="M:BonEngineSharp.Managers.DiagnosticsManager.IncreaseCounter(BonEngineSharp.Defs.DiagnosticsCounters,System.Int32)">
            <summary>
            Increase counter.
            </summary>
            <param name="counter">Counter id to increase.</param>
            <param name="amount">How much to increase counter.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.DiagnosticsManager.IncreaseCounter(System.Int32,System.Int32)">
            <summary>
            Increase counter.
            </summary>
            <param name="counter">Counter id to increase.</param>
            <param name="amount">How much to increase counter.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.DiagnosticsManager.ResetCounter(BonEngineSharp.Defs.DiagnosticsCounters)">
            <summary>
            Reset a counter.
            </summary>
            <param name="counter">Counter id to reset.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.DiagnosticsManager.ResetCounter(System.Int32)">
            <summary>
            Reset a counter.
            </summary>
            <param name="counter">Counter id to reset.</param>
        </member>
        <member name="T:BonEngineSharp.Managers.GameManager">
            <summary>
            Game manager.
            Controls the general game flow / application. This includes exiting the application, changing scene, querying total delta time, ect.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Managers.GameManager.Id">
            <summary>
            Get manager id.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.GameManager.Exit">
            <summary>
            Exit application.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.GameManager.ChangeScene(BonEngineSharp.Scene)">
            <summary>
            Change the active scene.
            </summary>
            <param name="scene">Scene to switch to.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GameManager.LoadConfig(System.String)">
            <summary>
            Load game config from file.
            </summary>
            <param name="path">Path of config file to load.</param>
        </member>
        <member name="P:BonEngineSharp.Managers.GameManager.ElapsedTime">
            <summary>
            Get total game elapsed time, in seconds.
            </summary>
            <returns>Elapsed time.</returns>
        </member>
        <member name="P:BonEngineSharp.Managers.GameManager.DeltaTime">
            <summary>
            Get current frame delta time, in seconds.
            </summary>
            <returns>Delta time.</returns>
        </member>
        <member name="T:BonEngineSharp.Managers.GfxManager">
            <summary>
            Gfx manager.
            Responsible to rendering sprites, shapes, texts, and control the main window's properties.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Managers.GfxManager.Id">
            <summary>
            Get manager id.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.DrawImage(BonEngineSharp.Assets.ImageAsset,BonEngineSharp.Framework.PointF,BonEngineSharp.Defs.BlendModes)">
            <summary>
            Draws an image on screen.
            </summary>
            <param name="image">Image to draw.</param>
            <param name="position">Drawing position.</param>
            <param name="blend">Blend mode.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.DrawImage(BonEngineSharp.Assets.ImageAsset,BonEngineSharp.Framework.PointF,BonEngineSharp.Framework.PointI,BonEngineSharp.Defs.BlendModes)">
            <summary>
            Draws an image on screen.
            </summary>
            <param name="image">Image to draw.</param>
            <param name="position">Drawing position.</param>
            <param name="size">Drawing size.</param>
            <param name="blend">Blend mode.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.DrawImage(BonEngineSharp.Assets.ImageAsset,BonEngineSharp.Framework.PointF,BonEngineSharp.Framework.PointI,BonEngineSharp.Defs.BlendModes,BonEngineSharp.Framework.RectangleI)">
            <summary>
            Draws an image on screen.
            </summary>
            <param name="image">Image to draw.</param>
            <param name="position">Drawing position.</param>
            <param name="size">Drawing size.</param>
            <param name="blend">Blend mode.</param>
            <param name="sourceRect">Source rectangle to draw.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.DrawImage(BonEngineSharp.Assets.ImageAsset,BonEngineSharp.Framework.PointF,BonEngineSharp.Framework.PointI,BonEngineSharp.Defs.BlendModes,BonEngineSharp.Framework.RectangleI,BonEngineSharp.Framework.PointF,System.Single)">
            <summary>
            Draws an image on screen.
            </summary>
            <param name="image">Image to draw.</param>
            <param name="position">Drawing position.</param>
            <param name="size">Drawing size.</param>
            <param name="blend">Blend mode.</param>
            <param name="sourceRect">Source rectangle to draw.</param>
            <param name="origin">Rotation and source position origin (relative to size).</param>
            <param name="rotation">Rotation, in degrees.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.DrawImage(BonEngineSharp.Assets.ImageAsset,BonEngineSharp.Framework.PointF,BonEngineSharp.Framework.PointI,BonEngineSharp.Defs.BlendModes,BonEngineSharp.Framework.RectangleI,BonEngineSharp.Framework.PointF,System.Single,BonEngineSharp.Framework.Color)">
            <summary>
            Draws an image on screen.
            </summary>
            <param name="image">Image to draw.</param>
            <param name="position">Drawing position.</param>
            <param name="size">Drawing size.</param>
            <param name="blend">Blend mode.</param>
            <param name="sourceRect">Source rectangle to draw.</param>
            <param name="origin">Rotation and source position origin (relative to size).</param>
            <param name="rotation">Rotation, in degrees.</param>
            <param name="color">Tint color.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.DrawSprite(BonEngineSharp.Framework.Sprite)">
            <summary>
            Draw a sprite on screen.
            </summary>
            <param name="sprite">Sprite to draw.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.DrawSprite(BonEngineSharp.Framework.Sprite,BonEngineSharp.Framework.PointF)">
            <summary>
            Draw a sprite on screen.
            </summary>
            <param name="sprite">Sprite to draw.</param>
            <param name="offset">Extra offset from sprite original position.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.DrawText(BonEngineSharp.Assets.FontAsset,System.String,BonEngineSharp.Framework.PointF,BonEngineSharp.Framework.Color,System.Int32,System.Int32,BonEngineSharp.Defs.BlendModes,BonEngineSharp.Framework.PointF,System.Single)">
            <summary>
            Draw text on screen.
            </summary>
            <param name="font">Font to use.</param>
            <param name="text">Text to draw.</param>
            <param name="position">Text position.</param>
            <param name="color">Text color.</param>
            <param name="fontSize">Font size.</param>
            <param name="maxWidth">Max line width.</param>
            <param name="blend">Blend mode.</param>
            <param name="origin">Text origin.</param>
            <param name="rotation">Text rotation.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.DrawText(BonEngineSharp.Assets.FontAsset,System.String,BonEngineSharp.Framework.PointF,BonEngineSharp.Framework.Color,System.Int32,System.Int32,BonEngineSharp.Defs.BlendModes)">
            <summary>
            Draw text on screen.
            </summary>
            <param name="font">Font to use.</param>
            <param name="text">Text to draw.</param>
            <param name="position">Text position.</param>
            <param name="color">Text color.</param>
            <param name="fontSize">Font size.</param>
            <param name="maxWidth">Max line width.</param>
            <param name="blend">Blend mode.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.DrawText(BonEngineSharp.Assets.FontAsset,System.String,BonEngineSharp.Framework.PointF,BonEngineSharp.Framework.Color,BonEngineSharp.Framework.Color,System.Int32,System.Int32,System.Int32,BonEngineSharp.Defs.BlendModes)">
            <summary>
            Draw text on screen.
            </summary>
            <param name="font">Font to use.</param>
            <param name="text">Text to draw.</param>
            <param name="position">Text position.</param>
            <param name="color">Text color.</param>
            <param name="strokeColor">Stroke color.</param>
            <param name="strokeWidth">Stroke width.</param>
            <param name="fontSize">Font size.</param>
            <param name="maxWidth">Max line width.</param>
            <param name="blend">Blend mode.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.DrawText(BonEngineSharp.Assets.FontAsset,System.String,BonEngineSharp.Framework.PointF)">
            <summary>
            Draw text on screen.
            </summary>
            <param name="font">Font to use.</param>
            <param name="text">Text to draw.</param>
            <param name="position">Text position.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.DrawLine(BonEngineSharp.Framework.PointI,BonEngineSharp.Framework.PointI,BonEngineSharp.Framework.Color,BonEngineSharp.Defs.BlendModes)">
            <summary>
            Draw a line.
            </summary>
            <param name="from">Source point.</param>
            <param name="to">Destination point.</param>
            <param name="color">Line color.</param>
            <param name="blend">Blend mode.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.DrawPixel(BonEngineSharp.Framework.PointI,BonEngineSharp.Framework.Color,BonEngineSharp.Defs.BlendModes)">
            <summary>
            Draw a pixel.
            </summary>
            <param name="position">Pixel position.</param>
            <param name="color">Pixel color.</param>
            <param name="blend">Blend mode.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.SetWindowProperties(System.String,System.Int32,System.Int32,BonEngineSharp.Defs.WindowModes,System.Boolean)">
            <summary>
            Set window properties.
            This will recreate the window.
            </summary>
            <param name="title">Window title.</param>
            <param name="width">Window width (0 for fullscreen).</param>
            <param name="height">Window height (0 for fullscreen).</param>
            <param name="windowMode">Window startup mode.</param>
            <param name="showCursor">Show / hide cursor.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.SetTitle(System.String)">
            <summary>
            Set window title.
            </summary>
            <param name="title">New title.</param>
        </member>
        <member name="P:BonEngineSharp.Managers.GfxManager.WindowSize">
            <summary>
            Get current window size.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.SetRenderTarget(BonEngineSharp.Assets.ImageAsset)">
            <summary>
            Set current render target.
            </summary>
            <param name="image">Image to draw on, or null to clear render target.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.DrawRectangle(BonEngineSharp.Framework.RectangleI,BonEngineSharp.Framework.Color,System.Boolean,BonEngineSharp.Defs.BlendModes)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="rectangle">Rectangle to draw.</param>
            <param name="color">Drawing color.</param>
            <param name="filled">Draw filled / hollow rectangle.</param>
            <param name="blend">Blend mode.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.DrawCircle(BonEngineSharp.Framework.PointI,System.Int32,BonEngineSharp.Framework.Color,System.Boolean,BonEngineSharp.Defs.BlendModes)">
            <summary>
            Draws a circle.
            </summary>
            <param name="center">Circle center.</param>
            <param name="radius">Circle radius.</param>
            <param name="color">Drawing color.</param>
            <param name="filled">Draw filled / hollow circle.</param>
            <param name="blend">Blend mode.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.ClearScreen(BonEngineSharp.Framework.Color,BonEngineSharp.Framework.RectangleI)">
            <summary>
            Clear a region of screen.
            </summary>
            <param name="color">Color to clear to.</param>
            <param name="region">Region to clear.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.GfxManager.ClearScreen(BonEngineSharp.Framework.Color)">
            <summary>
            Clear the entire screen.
            </summary>
            <param name="color">Color to clear to.</param>
        </member>
        <member name="P:BonEngineSharp.Managers.GfxManager.Viewport">
            <summary>
            Set rendering viewport (limits where you can render).
            To disable viewport, set RectangleI.Empty.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Managers.IManager">
            <summary>
            Base interface for all managers.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Managers.IManager.Id">
            <summary>
            Get manager id.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Managers.InputManager">
            <summary>
            Input manager.
            Used to recieve user input, either by querying keyboard keys and mouse directly, or by binding keys to actions and querying action states.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Managers.InputManager.Id">
            <summary>
            Get manager id.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.InputManager.Down(System.String)">
            <summary>
            Get if an action id is currently pressed down.
            </summary>
            <param name="action">Action to check.</param>
            <returns>True if any of the keys bound to this action id are down.</returns>
        </member>
        <member name="M:BonEngineSharp.Managers.InputManager.ReleasedNow(System.String)">
            <summary>
            Get if an action id was released in this update or fixed update frame.
            </summary>
            <param name="action">Action to check.</param>
            <returns>True if any of the keys bound to this action id were released during this frame.</returns>
        </member>
        <member name="M:BonEngineSharp.Managers.InputManager.PressedNow(System.String)">
            <summary>
            Get if an action id was pressed in this update or fixed update frame.
            </summary>
            <param name="action">Action to check.</param>
            <returns>True if any of the keys bound to this action id were pressed during this frame.</returns>
        </member>
        <member name="M:BonEngineSharp.Managers.InputManager.Down(BonEngineSharp.Defs.KeyCodes)">
            <summary>
            Get if akey is currently pressed down.
            </summary>
            <param name="key">Key to check.</param>		
            <returns>True if key is currently down.</returns>
        </member>
        <member name="M:BonEngineSharp.Managers.InputManager.ReleasedNow(BonEngineSharp.Defs.KeyCodes)">
            <summary>
            Get if a key was released in this update or fixed update frame.
            </summary>
            <param name="key">Key to check.</param>
            <returns>True if key was released during this frame.</returns>
        </member>
        <member name="M:BonEngineSharp.Managers.InputManager.PressedNow(BonEngineSharp.Defs.KeyCodes)">
            <summary>
            Get if a key was pressed in this update or fixed update frame.
            </summary>
            <param name="key">Key to check.</param>
            <returns>True if key was pressed during this frame.</returns>
        </member>
        <member name="P:BonEngineSharp.Managers.InputManager.ScrollDelta">
            <summary>
            Get mouse wheel / scroll delta of current frame.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Managers.InputManager.CursorPosition">
            <summary>
            Get cursor (mouse) position.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Managers.InputManager.CursorDelta">
            <summary>
            Get cursor (mouse) position change since last frame.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.InputManager.BindKey(BonEngineSharp.Defs.KeyCodes,System.String)">
            <summary>
            Binds a key code to an action.
            </summary>
            <param name="key">Key to bind.</param>
            <param name="action">Action to bind to.</param>
        </member>
        <member name="T:BonEngineSharp.Managers.LogManager">
            <summary>
            Log manager.
            Provides basic logging functionality.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Managers.LogManager.Id">
            <summary>
            Get manager id.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.LogManager.Write(BonEngineSharp.Defs.LogLevel,System.String,System.Object[])">
            <summary>
            Write a log message.
            </summary>
            <param name="level">Log level to write.</param>
            <param name="message">Message to write.</param>
            <param name="_params">Optional params to format string.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.LogManager.Debug(System.String,System.Object[])">
            <summary>
            Write a log debug message.
            </summary>
            <param name="message">Message to write.</param>
            <param name="_params">Optional params to format string.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.LogManager.Info(System.String,System.Object[])">
            <summary>
            Write a log info message.
            </summary>
            <param name="message">Message to write.</param>
            <param name="_params">Optional params to format string.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.LogManager.Warn(System.String,System.Object[])">
            <summary>
            Write a log warn message.
            </summary>
            <param name="message">Message to write.</param>
            <param name="_params">Optional params to format string.</param> 
        </member>
        <member name="M:BonEngineSharp.Managers.LogManager.Error(System.String,System.Object[])">
            <summary>
            Write a log error message.
            </summary>
            <param name="message">Message to write.</param>
            <param name="_params">Optional params to format string.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.LogManager.Critical(System.String,System.Object[])">
            <summary>
            Write a log critical message.
            </summary>
            <param name="message">Message to write.</param>
            <param name="_params">Optional params to format string.</param>
        </member>
        <member name="P:BonEngineSharp.Managers.LogManager.Level">
            <summary>
            Get / set logs level.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.LogManager.IsValid(BonEngineSharp.Defs.LogLevel)">
            <summary>
            Get if a given log level is currently valid and will be written to log.
            </summary>
            <param name="level">Log level to check.</param>
            <returns>True if log level is valid</returns>
        </member>
        <member name="T:BonEngineSharp.Managers.ManagerGetters">
            <summary>
            Provide API to get all built in managers.
            Inherit from this class to get API similar to a Scene where you can just call Gfx.DrawImage(..) or Input.Down(..).
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.ManagerGetters.GetManager``1(System.String)">
            <summary>
            Get manager of generic type by id.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Managers.ManagerGetters.Gfx">
            <summary>
            Get Gfx manager.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Managers.ManagerGetters.Sfx">
            <summary>
            Get Sfx manager.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Managers.ManagerGetters.Input">
            <summary>
            Get Input manager.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Managers.ManagerGetters.Assets">
            <summary>
            Get Assets manager.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Managers.ManagerGetters.Game">
            <summary>
            Get Game manager.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Managers.ManagerGetters.Diagnostics">
            <summary>
            Get Diagnostics manager.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Managers.ManagerGetters.Log">
            <summary>
            Get Log manager.
            </summary>
        </member>
        <member name="T:BonEngineSharp.Managers.SfxManager">
            <summary>
            Sfx manager.
            Used to play sound effects and music.
            </summary>
        </member>
        <member name="P:BonEngineSharp.Managers.SfxManager.Id">
            <summary>
            Get manager id.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.SfxManager.SetAudioProperties(System.Int32,BonEngineSharp.Defs.AudioFormats,System.Boolean,System.Int32)">
            <summary>
            Initialize / set audio device properties.
            If not called, BonEngine will initialize with defaults.
            </summary>
            <param name="frequency">Audio frequency.</param>
            <param name="format">Audio format.</param>
            <param name="stereo">Support stereo?</param>
            <param name="audioChunkSize">Size of the chunks to break sound tracks into. Smaller values means more responsiveness, but also more CPU to play sounds.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.SfxManager.PlayMusic(BonEngineSharp.Assets.MusicAsset,System.Int32,System.Int32)">
            <summary>
            Play a music track.
            </summary>
            <param name="music">Music asset to play.</param>
            <param name="volume">Music volume.</param>
            <param name="loops">How many times to repeat music (-1 = endless, 0 = once, above 0 = number of times).</param>
        </member>
        <member name="M:BonEngineSharp.Managers.SfxManager.PauseMusic(System.Boolean)">
            <summary>
            Pause / resume currently played music track.
            </summary>
            <param name="pause">True to pause, false to resume.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.SfxManager.SetMusicVolume(System.Int32)">
            <summary>
            Set the volume of the currently played music track.
            </summary>
            <param name="volume">Music volume.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.SfxManager.StopMusic">
            <summary>
            Stop the currently played music track.
            </summary>
        </member>
        <member name="M:BonEngineSharp.Managers.SfxManager.PlaySound(BonEngineSharp.Assets.SoundAsset,System.Int32,System.Int32,System.Single)">
            <summary>
            Play a sound effect.
            </summary>
            <param name="sound">Sound to play.</param>
            <param name="volume">Sound volume.</param>
            <param name="loops">How many times to repeat this sound (-1 = endless, 0 = once, above 0 = number of times).</param>
            <param name="pitch">Sound pitch effect.</param>
            <returns>Channel id, which you can use later to modify sound. Can be Invalid if there was no available channel.</returns>
        </member>
        <member name="M:BonEngineSharp.Managers.SfxManager.PlaySound(BonEngineSharp.Assets.SoundAsset,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Play a sound effect.
            </summary>
            <param name="sound">Sound to play.</param>
            <param name="volume">Sound volume.</param>
            <param name="loops">How many times to repeat this sound (-1 = endless, 0 = once, above 0 = number of times).</param>
            <param name="pitch">Sound pitch effect.</param>
            <param name="panLeft">Pan sound left - value should be 0.0-1.0.</param>
            <param name="panRight">Pan sound right - value should be 0.0-1.0.</param>
            <param name="distance">Sound source distance (affect volume) - value should be 0.0-1.0.</param>
            <returns>Channel id, which you can use later to modify sound. Can be Invalid if there was no available channel.</returns>
        </member>
        <member name="M:BonEngineSharp.Managers.SfxManager.SetChannelDistance(BonEngineSharp.Defs.SoundChannelId,System.Single)">
            <summary>
            Set sound channel distance,
            </summary>
            <param name="channel">Channel id.</param>
            <param name="distance">Channel distance.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.SfxManager.SetChannelVolume(BonEngineSharp.Defs.SoundChannelId,System.Int32)">
            <summary>
            Set sound channel distance,
            </summary>
            <param name="channel">Channel id.</param>
            <param name="volume">Channel volume.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.SfxManager.SetChannelPanning(BonEngineSharp.Defs.SoundChannelId,System.Single,System.Single)">
            <summary>
            Set sound channel panning,
            </summary>
            <param name="channel">Channel id.</param>
            <param name="panLeft">Pan sound left - value should be 0.0-1.0.</param>
            <param name="panRight">Pan sound right - value should be 0.0-1.0.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.SfxManager.StopChannel(BonEngineSharp.Defs.SoundChannelId)">
            <summary>
            Stop a playing channel.
            </summary>
            <param name="channel">Channel id.</param>
        </member>
        <member name="M:BonEngineSharp.Managers.SfxManager.SetMasterVolume(System.Int32,System.Int32)">
            <summary>
            Set master volume.
            </summary>
            <param name="soundEffectsVolume">Volume for sound effects.</param>
            <param name="musicVolume">Volume for music.</param>
        </member>
    </members>
</doc>
